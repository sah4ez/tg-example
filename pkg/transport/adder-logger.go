// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"time"

	"github.com/rs/zerolog"
	"github.com/sah4ez/tg-example/pkg/interfaces"
	"github.com/seniorGolang/dumper/viewer"
)

type loggerAdder struct {
	next interfaces.Adder
	log  zerolog.Logger
}

func loggerMiddlewareAdder(log zerolog.Logger) MiddlewareAdder {
	return func(next interfaces.Adder) interfaces.Adder {
		return &loggerAdder{
			log:  log,
			next: next,
		}
	}
}

func (m loggerAdder) Add(ctx context.Context, a int, b int) (c int, err error) {
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"method": "add",
			"request": viewer.Sprintf("%+v", requestAdderAdd{
				A: a,
				B: b,
			}),
			"response": viewer.Sprintf("%+v", responseAdderAdd{C: c}),
			"service":  "Adder",
			"took":     time.Since(begin).String(),
		}
		if ctx.Value(headerRequestID) != nil {
			fields["requestID"] = ctx.Value(headerRequestID)
		}
		if err != nil {
			m.log.Error().Err(err).Fields(fields).Msg("call add")
			return
		}
		m.log.Info().Fields(fields).Msg("call add")
	}(time.Now())
	return m.next.Add(ctx, a, b)
}
