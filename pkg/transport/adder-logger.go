// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"time"

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/sah4ez/tg-example/pkg/interfaces"
	"github.com/sah4ez/tg-example/pkg/transport/viewer"
)

type loggerAdder struct {
	next interfaces.Adder
}

func loggerMiddlewareAdder() MiddlewareAdder {
	return func(next interfaces.Adder) interfaces.Adder {
		return &loggerAdder{next: next}
	}
}

func (m loggerAdder) Sum(ctx context.Context, aInt int, bInt int) (c int, err error) {
	logger := log.Ctx(ctx).With().Str("service", "Adder").Str("method", "sum").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestAdderSum{
					AInt: aInt,
					BInt: bInt,
				}),
				"response": viewer.Sprintf("%+v", responseAdderSum{C: c}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call sum")
			return
		}
		logger.Info().Func(logHandle).Msg("call sum")
	}(time.Now())
	return m.next.Sum(ctx, aInt, bInt)
}
