// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"

	"github.com/sah4ez/tg-example/pkg/interfaces"
)

type serverUser struct {
	svc             interfaces.User
	getUserNameByID UserGetUserNameByID
}

type MiddlewareSetUser interface {
	Wrap(m MiddlewareUser)
	WrapGetUserNameByID(m MiddlewareUserGetUserNameByID)

	WithLog()
}

func newServerUser(svc interfaces.User) *serverUser {
	return &serverUser{
		getUserNameByID: svc.GetUserNameByID,
		svc:             svc,
	}
}

func (srv *serverUser) Wrap(m MiddlewareUser) {
	srv.svc = m(srv.svc)
	srv.getUserNameByID = srv.svc.GetUserNameByID
}

func (srv *serverUser) GetUserNameByID(ctx context.Context, id int) (name string, err error) {
	return srv.getUserNameByID(ctx, id)
}

func (srv *serverUser) WrapGetUserNameByID(m MiddlewareUserGetUserNameByID) {
	srv.getUserNameByID = m(srv.getUserNameByID)
}

func (srv *serverUser) WithLog() {
	srv.Wrap(loggerMiddlewareUser())
}
