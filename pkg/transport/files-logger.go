// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"time"

	"github.com/rs/zerolog/log"
	"github.com/sah4ez/tg-example/pkg/interfaces"
	"github.com/seniorGolang/dumper/viewer"
)

type loggerFiles struct {
	next interfaces.Files
}

func loggerMiddlewareFiles() MiddlewareFiles {
	return func(next interfaces.Files) interfaces.Files {
		return &loggerFiles{next: next}
	}
}

func (m loggerFiles) GetTemplate(ctx context.Context) (data []byte, name string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "Files").Str("method", "getTemplate").Logger()
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request": viewer.Sprintf("%+v", requestFilesGetTemplate{}),
			"response": viewer.Sprintf("%+v", responseFilesGetTemplate{
				Data: data,
				Name: name,
			}),
			"took": time.Since(begin).String(),
		}
		if err != nil {
			logger.Error().Err(err).Fields(fields).Msg("call getTemplate")
			return
		}
		logger.Info().Fields(fields).Msg("call getTemplate")
	}(time.Now())
	return m.next.GetTemplate(ctx)
}
