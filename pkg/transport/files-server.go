// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"

	"github.com/sah4ez/tg-example/pkg/interfaces"
)

type serverFiles struct {
	svc         interfaces.Files
	getTemplate FilesGetTemplate
}

type MiddlewareSetFiles interface {
	Wrap(m MiddlewareFiles)
	WrapGetTemplate(m MiddlewareFilesGetTemplate)

	WithLog()
}

func newServerFiles(svc interfaces.Files) *serverFiles {
	return &serverFiles{
		getTemplate: svc.GetTemplate,
		svc:         svc,
	}
}

func (srv *serverFiles) Wrap(m MiddlewareFiles) {
	srv.svc = m(srv.svc)
	srv.getTemplate = srv.svc.GetTemplate
}

func (srv *serverFiles) GetTemplate(ctx context.Context) (data []byte, name string, err error) {
	return srv.getTemplate(ctx)
}

func (srv *serverFiles) WrapGetTemplate(m MiddlewareFilesGetTemplate) {
	srv.getTemplate = m(srv.getTemplate)
}

func (srv *serverFiles) WithLog() {
	srv.Wrap(loggerMiddlewareFiles())
}
