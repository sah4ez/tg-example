// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package adder

import (
	"context"

	goUUID "github.com/google/uuid"
	json "github.com/seniorGolang/json"
)

type ClientAdder struct {
	*ClientJsonRPC
}

type retAdderAdd func(c int, err error)

func (cli *ClientAdder) ReqAdd(ret retAdderAdd, a int, b int) (request baseJsonRPC) {

	request = baseJsonRPC{
		Method: "adder.add",
		Params: requestAdderAdd{
			A: a,
			B: b,
		},
		Version: Version,
	}
	var err error
	var response responseAdderAdd

	if ret != nil {
		request.retHandler = func(jsonrpcResponse baseJsonRPC) {
			if jsonrpcResponse.Error != nil {
				err = cli.errorDecoder(jsonrpcResponse.Error)
				ret(response.C, err)
				return
			}
			err = json.Unmarshal(jsonrpcResponse.Result, &response)
			ret(response.C, err)
		}
		request.ID = []byte("\"" + goUUID.New().String() + "\"")
	}
	return
}

func (cli *ClientAdder) Add(ctx context.Context, a int, b int) (c int, err error) {

	retHandler := func(_c int, _err error) {
		c = _c
		err = _err
	}
	if blockErr := cli.Batch(ctx, cli.ReqAdd(retHandler, a, b)); blockErr != nil {
		err = blockErr
		return
	}
	return
}
